import groovy.json.JsonSlurper

plugins {
    id 'org.jetbrains.intellij' version '0.3.12'
    id 'org.jetbrains.kotlin.jvm' version '1.3.10'
}

group 'eu.long1.flutter'
version pluginVersion

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.3'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.10'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

patchPluginXml {
    version pluginVersion
    sinceBuild '181.5540.23'
    untilBuild '191.*'
}

intellij {
    pluginName 'Flutter i18n'
    version ideaVersion
    plugins = ['yaml']
}

// Read local.properties file.
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

// JSON parser instance.
def json = new JsonSlurper()

// Determine which branch we're building for.
def ideaBranch
if (ideaVersion == "IC-2019.1") {
    ideaBranch="191"
} else if (ideaVersion == "IC-2018.3") {
    ideaBranch="183"
} else if (ideaVersion == "IC-2018.2") {
    ideaBranch="182"
} else {
    ideaBranch="181"
}

System.out.println("\n")
System.out.println("***************************************************")
System.out.println("Building plugin for IntelliJ IDEA version $ideaVersion")
System.out.println("***************************************************")

// Parse Dart version needed for this branch.
def dartVersionsMap = json.parseText(dartVersions)
def dartVersion = dartVersionsMap[ideaBranch]
if (dartVersion != null) {
    intellij.plugins += "Dart:$dartVersion"
}

// Parse Flutter version needed for this branch.
def flutterVersionsMap = json.parseText(flutterVersions)
def flutterVersion = flutterVersionsMap[ideaBranch]
if (flutterVersion != null) {
    intellij.plugins += "io.flutter:$flutterVersion"
}

// Publishing credentials to JetBrains.
publishPlugin {
    username = localProperties.getProperty('username')
    password = localProperties.getProperty('password')
}
