plugins {
    id 'org.jetbrains.intellij' version '0.3.12'
    id 'org.jetbrains.kotlin.jvm' version '1.3.10'
}

group 'eu.long1.flutter'
version pluginVersion

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.3'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.10'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

patchPluginXml {
    version pluginVersion
    sinceBuild '181.5540.23'
    untilBuild '181.*'
}

intellij {
    pluginName 'Flutter i18n'
    version ideaVersion
    plugins = ['yaml']
}

// Read local.properties file.
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

// Publishing credentials to JetBrains.
publishPlugin {
    username = localProperties.getProperty('username')
    password = localProperties.getProperty('password')
}

// Load product matrix.
def productMatrixFile = 'product-matrix.json'
def jsonFile = file(productMatrixFile)
def productMatrix = new groovy.json.JsonSlurper().parseText(jsonFile.text)

// Fail if the product details file isn't found.
if (productMatrix == null || !(productMatrix instanceof Map)) {
    throw new IOException("Unable to read $productMatrixFile.")
}

// Fail if requested version is unsupported.
if (!productMatrix.containsKey(ideaVersion)) {
    throw new IllegalStateException("Requested IDEA version is unsupported: $ideaVersion")
}

// Determine which branch we're building for.
def productDetails = productMatrix[ideaVersion]
if (productDetails == null || !(productDetails instanceof Map)) {
    throw new RuntimeException("Product details for IDEA version $ideaVersion is missing or invalid.")
}

// Adjust plugin's output file name.
rootProject.setBuildDir("${rootProject.buildDir}/${productDetails.comments}")

System.out.println("\nBuilding plugin for IDEA version $ideaVersion (branch ${productDetails.comments})\n")
System.out.println("Since: ${productDetails.sinceBuild}")
System.out.println("Until: ${productDetails.untilBuild}")
System.out.println("Dart: ${productDetails.dartPluginVersion}")
System.out.println("Flutter: ${productDetails.flutterPluginVersion}\n")
System.out.println("Artifacts output directory: ${rootProject.buildDir}\n")

// Adjust plugin build settings.
intellij.plugins += "Dart:${productDetails.dartPluginVersion}"
intellij.plugins += "io.flutter:${productDetails.flutterPluginVersion}"
patchPluginXml.sinceBuild = productDetails.sinceBuild
patchPluginXml.untilBuild = productDetails.untilBuild
